(deftemplate proof
	(slot userName)
	(slot diseaseName)
        (slot testName)
	(slot validated)
)

(deftemplate user
	(slot name)
	(slot answer1 (allowed-integers 0 1 2 3))
	(slot answer2 (allowed-integers 0 1 2 3))
	(slot answer3 (allowed-integers 0 1 2 3))
	(slot answer4 (allowed-integers 0 1 2 3))
        (slot answer5 (allowed-integers 0 1 2 3))
	(slot answer6 (allowed-integers 0 1 2 3))
        (slot answer7 (allowed-integers 0 1 2 3))
	(slot answer8 (allowed-integers 0 1 2 3))
	(slot answer9 (allowed-integers 0 1 2 3))
	(slot answer10 (allowed-integers 0 1 2 3))
	(slot answer11 (allowed-integers 0 1 2 3))
        (slot answer12 (allowed-integers 0 1 2 3))
	(slot answer13 (allowed-integers 0 1 2 3))
        (slot answer14 (allowed-integers 0 1 2 3))
	(slot answer15 (allowed-integers 0 1 2 3))
	(slot answer16 (allowed-integers 0 1 2 3))
	(slot answer17 (allowed-integers 0 1 2 3))
	(slot answer18 (allowed-integers 0 1 2 3))
        (slot answer19 (allowed-integers 0 1 2 3))
	(slot answer20 (allowed-integers 0 1 2 3))
        (slot answer21 (allowed-integers 0 1 2 3))
	(slot answer22 (allowed-integers 0 1 2 3))
	(slot answer23 (allowed-integers 0 1 2 3))
        (slot answer24 (allowed-integers 0 1 2 3))
	(slot answer25 (allowed-integers 0 1 2 3))
        (slot answer26 (allowed-integers 0 1 2 3))
)

(deftemplate disease
	(slot nameDisease)
	(slot testName)
)

(deftemplate diseaseUser
	(slot nameUser)
	(slot nameDisease)
        (slot total)
        (slot count)
        (slot calculated)
	(slot valPrint)
)

(deftemplate testValues
	(slot nameDisease)
	(slot testName)
	(slot answer1 (allowed-integers 0 1 2 3))
        (slot answer2 (allowed-integers 0 1 2 3))
        (slot answer3 (allowed-integers 0 1 2 3))
        (slot answer4 (allowed-integers 0 1 2 3))
        (slot answer5 (allowed-integers 0 1 2 3))
        (slot answer6 (allowed-integers 0 1 2 3))
        (slot answer7 (allowed-integers 0 1 2 3))
	(slot answer8 (allowed-integers 0 1 2 3))
	(slot answer9 (allowed-integers 0 1 2 3))
	(slot answer10 (allowed-integers 0 1 2 3))
	(slot answer11 (allowed-integers 0 1 2 3))
        (slot answer12 (allowed-integers 0 1 2 3))
	(slot answer13 (allowed-integers 0 1 2 3))
        (slot answer14 (allowed-integers 0 1 2 3))
	(slot answer15 (allowed-integers 0 1 2 3))
	(slot answer16 (allowed-integers 0 1 2 3))
	(slot answer17 (allowed-integers 0 1 2 3))
	(slot answer18 (allowed-integers 0 1 2 3))
        (slot answer19 (allowed-integers 0 1 2 3))
	(slot answer20 (allowed-integers 0 1 2 3))
        (slot answer21 (allowed-integers 0 1 2 3))
	(slot answer22 (allowed-integers 0 1 2 3))
	(slot answer23 (allowed-integers 0 1 2 3))
        (slot answer24 (allowed-integers 0 1 2 3))
	(slot answer25 (allowed-integers 0 1 2 3))
        (slot answer26 (allowed-integers 0 1 2 3))
)

(deffacts Initial
        (user )

	(disease (nameDisease "Eating Disorder")(testName "Eating Attitudes"))

        (testValues (nameDisease "Eating Disorder") (testName "Eating Attitudes") (answer1 3) (answer2 3) (answer3 3) (answer4 3) (answer5 3) (answer6 3) (answer7 3) (answer8 3) (answer9 3) (answer10 3) (answer11 3) (answer12 3) (answer13 3) (answer14 3) (answer15 3) (answer16 3) (answer17 3) (answer18 3) (answer19 3) (answer20 3) (answer21 3) (answer22 3) (answer23 3) (answer24 3) (answer25 3) (answer26 3))
)

(defrule setProofs
	(declare (salience 500))
	?u <- (user (name ?n) (answer1 ?a1) (answer2 ?a2) (answer3 ?a3) (answer4 ?a4) (answer5 ?a5) (answer6 ?a6) (answer7 ?a7) (answer8 ?a8) (answer9 ?a9) (answer10 ?a10) (answer11 ?a11) (answer12 ?a12) (answer13 ?a13) (answer14 ?a14) (answer15 ?a15) (answer16 ?a16) (answer17 ?a17) (answer18 ?a18) (answer19 ?a19) (answer20 ?a20) (answer21 ?a21) (answer22 ?a22) (answer23 ?a23) (answer24 ?a24) (answer25 ?a25) (answer26 ?a26))
	(test(neq ?n nil))

	=>

	(assert (diseaseUser (nameUser ?n) (nameDisease "Eating Disorder") (total 78) (count 0) (calculated FALSE) (valPrint FALSE)))
        (assert (proof (userName ?n) (diseaseName "Eating Disorder") (testName "Eating Attitudes Test - 26 Item") (validated FALSE)))
)
		
(defrule testQuestion
	(declare (salience 400))
	?p <- (proof (userName ?n) (diseaseName ?name1) (testName ?tN) (validated FALSE))
	?u <- (user (name ?n) (answer1 ?a1) (answer2 ?a2) (answer3 ?a3) (answer4 ?a4) (answer5 ?a5) (answer6 ?a6) (answer7 ?a7) (answer8 ?a8) (answer9 ?a9) (answer10 ?a10) (answer11 ?a11) (answer12 ?a12) (answer13 ?a13) (answer14 ?a14) (answer15 ?a15) (answer16 ?a16) (answer17 ?a17) (answer18 ?a18) (answer19 ?a19) (answer20 ?a20) (answer21 ?a21) (answer22 ?a22) (answer23 ?a23) (answer24 ?a24) (answer25 ?a25) (answer26 ?a26))
	?r <- (diseaseUser (nameUser ?n) (nameDisease ?name1) (total ?t) (count ?c) (calculated ?cal) (valPrint FALSE))

	=>
        (modify ?r (count (+ ?c ?a1 ?a2 ?a3 ?a4 ?a5 ?a6 ?a7 ?a8 ?a9 ?a10 ?a11 ?a12 ?a13 ?a14 ?a15 ?a16 ?a17 ?a18 ?a19 ?a20 ?a21 ?a22 ?a23 ?a24 ?a25 ?a26)))
      	(modify ?p (validated TRUE))
)	


(defrule assert-unprinted "Asserts each item that needs to be printed."
  	(declare (salience 300))
  	(diseaseUser (nameUser ?name2) (nameDisease ?name1) (total ?t) (count ?c) (calculated ?cal) (valPrint FALSE))
  	=>
  	(assert (unprinted ?name1))
        (printout t "The user " ?name2 " has obtained " ?c " points" crlf)
        (if (<= ?c 13)
      	     	then 
        	(printout t "The patient is considered as normal." crlf))
	(if (and (>= ?c 14) (<= ?c 20))
      	     	then 
             	(printout t "The patient has mild eating disorder. Please, take care of yourself and rest." crlf))
	(if (and (>= ?c 21) (<= ?c 34))
      	     	then 
             	(printout t "The patient has moderate eating disorder. Please refer to a specialist." crlf))
	(if (>= ?c 35)
      	     	then 
        	(printout t "The patient has severe eating disorder. Please refer to a specialist as soon as possible." crlf))
)
