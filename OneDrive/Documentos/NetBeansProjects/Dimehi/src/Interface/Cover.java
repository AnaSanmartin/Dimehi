/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;
import Pojos.Disease;
import Pojos.DiseaseUser;
import Pojos.Test;
import Pojos.User;
import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.border.LineBorder;
import java.awt.Dimension;

/**
 *
 * @author annys
 */
public class Cover extends javax.swing.JFrame {

    
    
    public Cover() {
        initComponents();
        this.setSize(new Dimension(600,750));
        //setIcon();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        title1 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        usernameField = new javax.swing.JTextField();
        SigninButton = new javax.swing.JButton();
        SignupButton = new javax.swing.JButton();
        passwordField = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        title1.setFont(new java.awt.Font("Trebuchet MS", 1, 56)); // NOI18N
        title1.setText("DIMEHI");

        jLabel1.setFont(new java.awt.Font("Tahoma", 2, 24)); // NOI18N
        jLabel1.setText("DIagnostic of MEntal Health Issues");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setText("Username");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel3.setText("Password");

        usernameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameFieldActionPerformed(evt);
            }
        });

        SigninButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        SigninButton.setText("Sign in");
        SigninButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SigninButtonActionPerformed(evt);
            }
        });

        SignupButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        SignupButton.setText("Sign up");
        SignupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SignupButtonActionPerformed(evt);
            }
        });

        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 110, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(52, 52, 52)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(usernameField, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                    .addComponent(passwordField))
                .addGap(104, 104, 104))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(223, 223, 223)
                        .addComponent(title1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(275, 275, 275)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SignupButton)
                            .addComponent(SigninButton)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(72, 72, 72)
                .addComponent(title1)
                .addGap(48, 48, 48)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 147, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(passwordField)))
                .addGap(92, 92, 92)
                .addComponent(SigninButton)
                .addGap(29, 29, 29)
                .addComponent(SignupButton)
                .addGap(112, 112, 112))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void usernameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameFieldActionPerformed

    private void SigninButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SigninButtonActionPerformed
        resetParameters();

        String userName = usernameField.getText();
        String password = String.valueOf(passwordField.getPassword());

        if(userName.isEmpty() && password.isEmpty()){
            usernameField.setBorder(new LineBorder(Color.red,2));
            passwordField.setBorder(new LineBorder(Color.red,2));
            JOptionPane.showMessageDialog(new JFrame(), "Input Username and Password!!", "Fatal Error",JOptionPane.ERROR_MESSAGE);
        }
        else if (userName.isEmpty()){
            usernameField.setBorder(new LineBorder(Color.red,2));
            passwordField.setBorder(new LineBorder(Color.black,1));
            JOptionPane.showMessageDialog(new JFrame(), "Input Username!!","Error",JOptionPane.WARNING_MESSAGE);
        } else if (password.isEmpty()){
            passwordField.setBorder(new LineBorder(Color.red,2));
            usernameField.setBorder(new LineBorder(Color.black,1));
            JOptionPane.showMessageDialog(new JFrame(), "Input Password!!","Error",JOptionPane.WARNING_MESSAGE);
        } else {
            boolean exist = checkUser(userName,password);// Comparo con mi texto
            if (exist){

                ArrayList<DiseaseUser> diseaseUser = cleanArrayByUserName(loadAllDiseaseUser("UserDiseases.txt","data"), userName);
                Clips clipsFrame;
                clipsFrame = new Clips(diseaseUser);
                clipsFrame.setLocationRelativeTo(null);
                clipsFrame.setVisible(true);
                this.setVisible(false);
                this.dispose();
                 
            }else{
                usernameField.setBorder(new LineBorder(Color.red,2));
                passwordField.setBorder(new LineBorder(Color.red,2));
                JOptionPane.showMessageDialog(new JFrame(), "Incorrect Username or Password!!","Error",JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_SigninButtonActionPerformed

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordFieldActionPerformed

    private void SignupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SignupButtonActionPerformed
        UserInfo userFrame = new UserInfo();
        userFrame.setLocationRelativeTo(null);
        userFrame.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_SignupButtonActionPerformed

    public static ArrayList loadAllUsers(String nombreArchivo,String directorio)
    {
        
        ArrayList <User> users = new ArrayList();
        int ultUser;
        
        File archivo;
        
        FileInputStream fileInputStream = null;
        ObjectInputStream objectInputStream = null;

        archivo = new File(directorio,nombreArchivo);
        if(!archivo.exists())
        {
            System.out.println("File does not exist, creating one");
            return users;
        }
        try{
            System.out.println("File exists, loading...");
            fileInputStream = new FileInputStream(archivo);
            objectInputStream = new ObjectInputStream(fileInputStream);

            ultUser = (int) objectInputStream.readObject();
            
            for(int i=0;i<ultUser;i++)
            {
                users.add((User)objectInputStream.readObject());
            } 
            
        }catch(IOException | ClassNotFoundException ex)
        {ex.printStackTrace();
        }finally {
            try {
                if (fileInputStream != null) {
                    fileInputStream.close();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            try {
                if (objectInputStream != null) {
                    objectInputStream.close();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            
        }/*Finally*/
    return users;
        
    }
    
    public static ArrayList loadAllDiseases(String nombreArchivo,String directorio)
    {
        ArrayList <Disease> disease = new ArrayList();
        int ultAl;
        
        File archivo;
        
        FileInputStream fileInputStream = null;
        ObjectInputStream objectInputStream = null;

        archivo = new File(directorio,nombreArchivo);
        if(!archivo.exists())
        {
            return disease;
        }
        try{

            fileInputStream = new FileInputStream(archivo);
            objectInputStream = new ObjectInputStream(fileInputStream);

            ultAl = (int) objectInputStream.readObject();
            
            for(int i=0;i<ultAl;i++)
            {
                disease.add((Disease)objectInputStream.readObject());
            } 
            
        }catch(IOException | ClassNotFoundException ex)
        {
            ex.printStackTrace();
        }finally {
            try {
                if (fileInputStream != null) {
                    fileInputStream.close();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            try {
                if (objectInputStream != null) {
                    objectInputStream.close();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            
        }
    return disease;
        
    }
    
    public static ArrayList loadAllDiseaseUser(String nombreArchivo,String directorio)
    {
        ArrayList <DiseaseUser> diseaseUser = new ArrayList();
        int ultAl;
        
        File archivo;
        
        FileInputStream fileInputStream = null;
        ObjectInputStream objectInputStream = null;

        archivo = new File(directorio,nombreArchivo);
        if(!archivo.exists())
        {
            return diseaseUser;
        }
        try{

            fileInputStream = new FileInputStream(archivo);
            objectInputStream = new ObjectInputStream(fileInputStream);

            ultAl = (int) objectInputStream.readObject();
            
            for(int i=0;i<ultAl;i++)
            {
                diseaseUser.add((DiseaseUser)objectInputStream.readObject());
            } 
            
        }catch(IOException | ClassNotFoundException ex)
        {
            ex.printStackTrace();
        }finally {
            try {
                if (fileInputStream != null) {
                    fileInputStream.close();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            try {
                if (objectInputStream != null) {
                    objectInputStream.close();
                }
            } catch (IOException ex) {
                ex.printStackTrace();
            }
            
        }
    return diseaseUser;
        
    }
    
    private ArrayList<DiseaseUser> cleanArrayByUserName(ArrayList diseaseUsers, String userName) {
    
        ArrayList<DiseaseUser> cleanDiseaseUsers = new ArrayList<DiseaseUser>();
        
        Iterator it = diseaseUsers.iterator();
        DiseaseUser DU = null;
        
        while(it.hasNext()){
            DU = (DiseaseUser)(it.next());
            System.out.println(DU.getNameUser());
            if(userName.equals(DU.getNameUser())){
                cleanDiseaseUsers.add(DU);
            }
        }
        System.out.println("Number of tests in the document are " + diseaseUsers.size());
        System.out.println("Number of tests retrieved are " + cleanDiseaseUsers.size());
        return cleanDiseaseUsers;
    }
    
    public static DiseaseUser loadDiseaseUserInfo(String nombreArchivo, String directorio, String userName){
        ArrayList<Disease> disease = loadAllDiseases(nombreArchivo,directorio);
        Iterator it = disease.iterator();
        DiseaseUser du = null;
        
        while(it.hasNext()){
            du = (DiseaseUser)(it.next());
            if(userName.equals(du.getNameUser())){
                break;
            }
        }
        return du;
    }

    public static String encodePassword(String passwordToEncode)
    {
        //This method is use to encode the pasword of the Client or Doctor.
        String passwordToHash = passwordToEncode;
        String generatedPassword = null;
        try 
        {
            // Create MessageDigest instance for MD5
            MessageDigest md = MessageDigest.getInstance("MD5");
            //Add password bytes to digest
            md.update(passwordToHash.getBytes());
            //Get the hash's bytes
            byte[] bytes = md.digest();
            //This bytes[] has bytes in decimal format;
            //Convert it to hexadecimal format
            StringBuilder sb = new StringBuilder();
            for(int i=0; i< bytes.length ;i++)
            {
                sb.append(Integer.toString((bytes[i] & 0xff) + 0x100, 16).substring(1));
            }
            //Get complete hashed password in hex format
            generatedPassword = sb.toString();
        }
        catch (NoSuchAlgorithmException e)
        {
            e.printStackTrace();
        }

        return generatedPassword;
    }
             
        
    public static boolean checkUser(String us, String password)
    {
        boolean ans = false;
        User user = null;
        
        ArrayList<User> namePasswords = loadAllUsers("UserPasswords.txt","data");
       
        Iterator it = namePasswords.iterator();
        for(int i = 0; i<namePasswords.size();i++)
        {
            user = (User)it.next();
            if((user.getPassword().equals(encodePassword(password))) && (user.getUserName().equals(us)))
            {
                ans = true;
                break;
            }
        }
        
        return ans;
    }
    
     private void resetParameters() {
        
    }

     //Para añadir un logo
    /*private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("Icons/logo_mni.jpg")));
        this.setTitle("LRG");
    }*/

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SigninButton;
    private javax.swing.JButton SignupButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel title1;
    private javax.swing.JTextField usernameField;
    // End of variables declaration//GEN-END:variables

    
}
