(deftemplate proof
	(slot userName)
	(slot diseaseName)
        (slot testName)
	(slot validated)
)

(deftemplate user
	(slot name)
	(slot answer1 (allowed-integers 0 1 2 3))
	(slot answer2 (allowed-integers 0 1 2 3))
	(slot answer3 (allowed-integers 0 1 2 3))
	(slot answer4 (allowed-integers 0 1 2 3))
        (slot answer5 (allowed-integers 0 1 2 3))
	(slot answer6 (allowed-integers 0 1 2 3))
        (slot answer7 (allowed-integers 0 1 2 3))
)

(deftemplate disease
	(slot nameDisease)
	(slot testName)
)

(deftemplate diseaseUser
	(slot nameUser)
	(slot nameDisease)
        (slot total)
        (slot count)
        (slot calculated)
	(slot valPrint)
)

(deftemplate testValues
	(slot nameDisease)
	(slot testName)
	(slot answer1 (allowed-integers 0 1 2 3))
        (slot answer2 (allowed-integers 0 1 2 3))
        (slot answer3 (allowed-integers 0 1 2 3))
        (slot answer4 (allowed-integers 0 1 2 3))
        (slot answer5 (allowed-integers 0 1 2 3))
        (slot answer6 (allowed-integers 0 1 2 3))
        (slot answer7 (allowed-integers 0 1 2 3))
)

(deffacts Initial
        (user )

	(disease (nameDisease "Depressive Disorder")(testName "HADS"))

        (testValues (nameDisease "Depressive Disorder") (testName "HADS") (answer1 3) (answer2 3) (answer3 3) (answer4 3) (answer5 3) (answer6 3) (answer7 3))
)

(defrule setProofs
	(declare (salience 500))
	?u <- (user (name ?n) (answer1 ?a1) (answer2 ?a2) (answer3 ?a3) (answer4 ?a4) (answer5 ?a5) (answer6 ?a6) (answer7 ?a7))
	(test(neq ?n nil))

	=>

	(assert (diseaseUser (nameUser ?n) (nameDisease "Depressive Disorder") (total 21) (count 0) (calculated FALSE) (valPrint FALSE)))
        (assert (proof (userName ?n) (diseaseName "Depressive Disorder") (testName "Hospital Anxiety and Depression Scale") (validated FALSE)))
)
		
(defrule testQuestion
	(declare (salience 400))
	?p <- (proof (userName ?n) (diseaseName ?name1) (testName ?tN) (validated FALSE))
	?u <- (user (name ?n) (answer1 ?a1) (answer2 ?a2) (answer3 ?a3) (answer4 ?a4) (answer5 ?a5) (answer6 ?a6) (answer7 ?a7)) 
	?r <- (diseaseUser (nameUser ?n) (nameDisease ?name1) (total ?t) (count ?c) (calculated ?cal) (valPrint FALSE))

	=>
        (modify ?r (count (+ ?c ?a1 ?a2 ?a3 ?a4 ?a5 ?a6 ?a7)))
      	(modify ?p (validated TRUE))
)	


(defrule assert-unprinted "Asserts each item that needs to be printed."
  	(declare (salience 300))
  	(diseaseUser (nameUser ?name2) (nameDisease ?name1) (total ?t) (count ?c) (calculated ?cal) (valPrint FALSE))
  	=>
  	(assert (unprinted ?name1))
        (printout t "The user " ?name2 " has obtained " ?c " points" crlf)
	(if (<= ?c 7)
      	     	then 
        	(printout t "The patient is considered as normal." crlf))
	(if (and (>= ?c 8) (<= ?c 10))
      	     	then 
             	(printout t "The patient has probaly depression. Please, I recomend you to refer to a specialist." crlf))
	(if (>= ?c 11)
      	     	then 
        	(printout t "The patient has severe depression.Please refer to a specialist as soon as possible" crlf))
)
